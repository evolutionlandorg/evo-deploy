#!/usr/bin/env bash

set -e

. $(PWD)/bin/init

# step 1
XWRING=$(dappCreate "token-contracts" "src/xWRING.sol:xWRING")
addAddress "TOKEN_ERC20_RING" "$XWRING"

# step 2
# prepare addr for xWRING, lps
register "uint" "UINT_AUTOBIRTH_FEE" "$(loadConf ".apostle.birthFee")"
register "uint" "UINT_CHANGECLASS_FEE" "$(loadConf ".apostle.changeClassFee")"

timestamp="$(loadConf ".furnace.drillLuckyBoxReleaseTime")"
dappCreate "furnace" src/DrillLuckyBoxV2.sol:DrillLuckyBoxV2 $SETTINGSREGISTRY $DRILLTAKEBACK $(seth --to-uint256 $timestamp)

dappUpgrade "common-contracts" contracts/TokenUseV2.sol:TokenUseV2 "$TOKENUSE_PROXY"
dappUpgrade "market-contracts" contracts/auction/PointsRewardPoolV2.sol:PointsRewardPoolV2 "$POINTSREWARDPOOL_PROXY"
register "uint" "UINT_SMALL_TICKET_FEE" 0
register "uint" "UINT_LARGE_TICKET_FEE" 0

register "addr" "CONTRACT_DIVIDENDS_POOL" "0x0000000000000000000000000000000000000000"
dappUpgrade "market-contracts" contracts/auction/RevenuePoolCrab.sol:RevenuePoolCrab "$REVENUEPOOL_PROXY"

register "addr" "CONTRACT_RING_ERC20_TOKEN" "$TOKEN_ERC20_RING"

# teller
register "addr" "CONTRACT_LP_GOLD_ERC20_TOKEN" "$(loadConf ".furnace.lpGOLD")"
register "addr" "CONTRACT_LP_WOOD_ERC20_TOKEN" "$(loadConf ".furnace.lpWOOD")"
register "addr" "CONTRACT_LP_WATER_ERC20_TOKEN" "$(loadConf ".furnace.lpWATER")"
register "addr" "CONTRACT_LP_FIRE_ERC20_TOKEN" "$(loadConf ".furnace.lpFIRE")"
register "addr" "CONTRACT_LP_SOIL_ERC20_TOKEN" "$(loadConf ".furnace.lpSOIL")"

# 2 class
CONTRACT_LP_ELEMENT_TOKEN=$(seth --to-bytes32 $(seth --from-ascii "CONTRACT_LP_ELEMENT_TOKEN"))
seth send "$METADATATELLER_PROXY" "removeLPToken(bytes32,address)" "$CONTRACT_LP_ELEMENT_TOKEN" "0x8e97f45bD127E7af3034d82a34d665746d348841"
seth send "$METADATATELLER_PROXY" "removeLPToken(bytes32,address)" "$CONTRACT_LP_ELEMENT_TOKEN" "0x3710F045307d7e0906F1Fbd0B0dF12c0Bc787382"
seth send "$METADATATELLER_PROXY" "removeLPToken(bytes32,address)" "$CONTRACT_LP_ELEMENT_TOKEN" "0xdb279D65225162280fACae2F3Ca8A3D2F63ea9BF"
seth send "$METADATATELLER_PROXY" "removeLPToken(bytes32,address)" "$CONTRACT_LP_ELEMENT_TOKEN" "0x15f2fBD98a0657e2afcAB08922632e58B1cC9FdD"
seth send "$METADATATELLER_PROXY" "removeLPToken(bytes32,address)" "$CONTRACT_LP_ELEMENT_TOKEN" "0x1E4b46582bbA7E5Ddb107d3a640e441774980525"

seth send "$METADATATELLER_PROXY" "addLPToken(bytes32,address,uint8)" "$CONTRACT_LP_ELEMENT_TOKEN" "$(loadConf ".furnace.lpGOLD")" 1
seth send "$METADATATELLER_PROXY" "addLPToken(bytes32,address,uint8)" "$CONTRACT_LP_ELEMENT_TOKEN" "$(loadConf ".furnace.lpWOOD")" 2
seth send "$METADATATELLER_PROXY" "addLPToken(bytes32,address,uint8)" "$CONTRACT_LP_ELEMENT_TOKEN" "$(loadConf ".furnace.lpWATER")" 3
seth send "$METADATATELLER_PROXY" "addLPToken(bytes32,address,uint8)" "$CONTRACT_LP_ELEMENT_TOKEN" "$(loadConf ".furnace.lpFIRE")" 4
seth send "$METADATATELLER_PROXY" "addLPToken(bytes32,address,uint8)" "$CONTRACT_LP_ELEMENT_TOKEN" "$(loadConf ".furnace.lpSOIL")" 5

seth send "$FORMULA_PROXY" "setAmount(uint256,uint256)" 3 $(seth --to-wei 450 ether)
seth send "$FORMULA_PROXY" "setAmount(uint256,uint256)" 4 $(seth --to-wei 450 ether)
seth send "$FORMULA_PROXY" "setAmount(uint256,uint256)" 5 $(seth --to-wei 450 ether)

for i in {0..5}; do
  echo "----------------------------------------------------------------"
  seth call "$FORMULA_PROXY" "getMinor(uint256)(bytes32,uint256)" $i
done
