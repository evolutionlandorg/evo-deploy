#!/usr/bin/env bash

set -eo pipefail

DAPP_LIB=${DAPP_LIB:-lib}

config-init() {
  path=${ADDRESSES_PATH:-$1}
  if [[ ! -e "$path" ]]; then
    echo "Config file not found: $path not found"
    exit 1
  fi
  export ADDRESSES_FILE=$path
  echo $path
  local exports
  exports=$(cat $path | jq -r ".deploy_data // . | \
    to_entries|map(\"\(.key)=\(.value|tostring)\")|.[]")
  for e in $exports; do export "$e"; done
}

GREEN='\033[0;32m'
NC='\033[0m' # No Color

log() {
    printf '%b\n' "${GREEN}${1}${NC}"
    echo ""
}

info() {
  echo >&2 "${0##*/}: info: ${*:1}"
}

toUpper() {
    echo "$1" | tr '[:lower:]' '[:upper:]'
}

toLower() {
    echo "$1" | tr '[:upper:]' '[:lower:]'
}

addAddress() {
    if [ -z "$1" ] || [ -z "$2" ]
      then
        echo "addAddress: No argument supplied"
        exit 1
    fi
    cat "$ADDRESSES_FILE" | jq --arg key "$1" --arg value "$2" '.[$key] = $value' | sponge "$ADDRESSES_FILE"
    log "$1=$2"
}

loadAddresses() {
    local exports
    exports=$(cat $ADDRESSES_FILE | jq -r ".deploy_data // . | \
        to_entries|map(\"\(.key)=\(.value|tostring)\")|.[]")
    for e in $exports; do export "$e"; done
}

if ! [[ $SETH_INIT ]]; then
  export SETH_INIT=1
  # shellcheck source=/dev/null
  [[ -e ~/.sethrc ]] && . ~/.sethrc
  # shellcheck source=/dev/null
  [[ $(pwd) != ~ && -e .sethrc ]] && . .sethrc
fi

if [[ "$SETH_CHAIN?" ]]; then
  case "$SETH_CHAIN" in
    mainnet|ropsten|pangolin|crab|crabtest|heco|hecotest|bsc|bsctest|polygon|mumbai)
      config-init "${PWD}/bin/addr/${SETH_CHAIN}.json";
      config_file="${PWD}/bin/conf/${SETH_CHAIN}.json";
      ;;
    *)
      (echo "Invalid DEPLOY_CHAIN"; exit 1)
  esac
fi


deployProxy() {
  set -e
  local lib; lib=$1
  local proxy; proxy=$2
  local class; class=$3
  local sig; sig=$4
  local calldata; calldata=$(seth calldata "$sig" ${@:5})
  local addr; addr=$(dappCreate "$lib" "$class")
  local proxyAddr; proxyAddr=$(dappProxy "$proxy" "$addr" "${EVOPROXYADMIN?}" "$calldata")
  echo "$proxyAddr"
}

deployProxy2() {
  set -e
  local lib; lib=$1
  local proxy; proxy=$2
  local class; class=$3
  local sig; sig=$4
  local calldata; calldata=$(seth calldata "$sig" ${@:5})
  local addr; addr=$(dappCreate "$lib" "$class")
  local proxyAddr; proxyAddr=$(dappCreate "$lib" "$proxy" "$addr" "${EVOPROXYADMIN?}" "$calldata")
  echo "$proxyAddr"
}


dappCreate() {
  set -e
  local lib; lib=$1
  local class; class=$2
  local addr; addr=$(DAPP_ROOT="$DAPP_LIB/$lib" dapp create "$class" "${@:3}")
  local name; name=${class#*:}
  local proxy; proxy=$(toUpper $name)
  if test "${proxy:0-5}" == "PROXY"; then
    proxy="${proxy%%"PROXY"}_PROXY"
  fi
  addAddress "$proxy" "$addr" >/dev/null
  info "$proxy deployed at $addr"
  echo "$addr"
}

dappAuth() {
  set -e
  local auth; auth=$1
  local lib; lib=$2
  local class; class=$3
  local wards; wards=$4
  local sigs; sigs=$5
  local n=($(echo ${sigs} | tr " " "\n"))
  local g=$( IFS=$','; echo "${n[*]}")
  local m=($(echo ${wards} | tr " " "\n"))
  local s=()
  for ward in "${m[@]}"; do
    s+=("$(seth lookup $ward)")
  done
  local l=$( IFS=$','; echo "${s[*]}")
  local addr; addr=$(DAPP_ROOT="$DAPP_LIB/$lib" dapp create "$class" "[$l]" "[$g]")

  for w in "${m[@]}"; do
    if test "${#s[@]}" == 0; then
      if test "$(seth call "$addr" "canCall(address,address,bytes4)(bool)" "$w" "0x0000000000000000000000000000000000000000" "0x00000000")" != true; then
        (echo "checkAuth $addr 0x00000000 failed"; exit 1;)
      fi
    else
      for sig in "${n[@]}"; do
        if test "$(seth call "$addr" "canCall(address,address,bytes4)(bool)" "$w" "0x0000000000000000000000000000000000000000" "$sig")" != true; then
          (echo "checkAuth $addr $sig failed"; exit 1;)
        fi
      done
    fi
  done

  local name; name="${auth}_${class#*:}"
  name="$(toUpper $name)"
  addAddress "$name" "$addr" >/dev/null
  info "$name deployed at $addr"
  echo "$addr"
}

dappUpgrade() {
  set -e
  local lib; lib=$1
  local class; class=$2
  local proxy; proxy=$3
  newImp=$(dappCreate "$lib" "$class" )
  seth send "$EVOPROXYADMIN" "upgrade(address,address)" "$proxy" "$newImp"
  if test $(seth call "$EVOPROXYADMIN" "getProxyImplementation(address)(address)" "$proxy") != "$newImp"; then
    (info "${class#*:} check migration failed."; exit 1;)
  fi
  info "${class#*:} migration finished."
}

dappProxy() {
  set -e
  local class; class=$1
  local addr; addr=$(dapp create "$class" "${@:2}")
  local name; name=${class#*:}
  local proxy; proxy=$(toUpper "$name")
  proxy="${proxy%%"PROXY"}_PROXY"
  addAddress "$proxy" "$addr" >/dev/null
  info "$proxy deployed at $addr"
  echo "$addr"
}

addressOf() {
  local id=$(seth --to-bytes32 $(seth --from-ascii "${1?}"))
  local addr=$(seth call "$SETTINGSREGISTRY" "addressOf(bytes32)(address)" "$id")
  echo "$addr"
}

setAddress() {
  local id=$(seth --to-bytes32 $(seth --from-ascii "${1?}"))
  local addr="${2?}"
  if [[ $addr = @* ]]; then
    addr=$(seth lookup "$addr")
  fi
  seth send "${SETTINGSREGISTRY?}" "setAddressProperty(bytes32,address)" "$id" "$addr"
  if test "$(seth --to-checksum-address $addr)" != "$(addressOf $1)"; then
    (echo "registry $1 failed!"; exit 1;)
  fi
  info "$1 regisered."
}

uintOf() {
  local id=$(seth --to-bytes32 $(seth --from-ascii "${1?}"))
  echo "$(seth call "$SETTINGSREGISTRY" "uintOf(bytes32)(uint256)" "$id")"
}

setUint() {
  set -e
  local id=$(seth --to-bytes32 $(seth --from-ascii "${1?}"))
  local addr="${2?}"
  seth send "${SETTINGSREGISTRY?}" "setUintProperty(bytes32,uint256)" "$id" "$addr"
  if test "$addr" != "$(uintOf $1)"; then
    (echo "registry $1 failed!"; exit 1;)
  fi
  info "$1 regisered."
}

authOf() {
  local proxy="${1?}";
  local auth=$(seth call $proxy "authority()(address)");
  echo "$auth"
}

setAuth() {
  set -e
  local proxy="${1?}";
  local auth="${2?}";
  seth send "$proxy" "setAuthority(address)" "$auth"
  if test "$(seth --to-checksum-address $auth)" != "$(authOf $proxy)"; then
    (echo "$proxy setAuthority ${auth} failed!"; exit 1;)
  fi
}

register() {
  local t; t="$1"
  if test "$t" == "addr"; then
    setAddress "${@:2}"
  elif test "$t" == "uint"; then
    setUint "${@:2}"
  else
    (echo "registry $2 failed!"; exit 1;)
  fi
}


loadConf() {
  if [ -z "$1" ]
    then
      echo "conf: Invalid key"
      exit 1
  fi
  local key; key=$1
  jq -r "${key}" "$CONFIG_FILE"
}

loadAuthConf() {
  if [ -z "$1" ]
    then
      echo "conf: Invalid key"
      exit 1
  fi
  local key; key=$1
  jq -r "${key}" "$AUTH_CONFIG_FILE"
}

export CONFIG_FILE="${config_file-${PWD}/bin/conf/default.json}"
export AUTH_CONFIG_FILE="${auth_config_file-${PWD}/bin/conf/auth.json}"
