#!/usr/bin/env bash

set -e

. $(PWD)/bin/init

# seth --calldata-decode "assignNewLand(int256,int256,address,uint256,uint256)" 0x3a137196fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc00000000000000000000000000000000000000000000000000000000000000310000000000000000000000004941f719fb5775edbebdcfb632b10b9f87fc16eb000000000000000000000000000000000000000000000063000300c6000200630000000000000000000000000000000000000000000000000000000000000001 

# owner=0x4941f719FB5775EdbEbDCFb632B10b9f87fc16eB
# landbase="$LANDBASE_PROXY"
# x=$(seth --to-int256 -4)
# y=$(seth --to-int256 49)
# attr=1826228508572579397731
# mask=1
# seth estimate -F 0xFcC598b3E3575CA937AF7F0E804a8BAb5E92a3f6 "$landbase" "assignNewLand(int256,int256,address,uint256,uint256)" $x $y $owner $attr $mask

# owners=$(loadConf ".multiSigWallet.owners | .[]")
# n=($(echo ${owners} | tr " " "\n"))
# n=(0x0f14341A7f464320319025540E8Fe48Ad0fe5aec 0x7aE77149ed38c5dD313e9069d790Ce7085caf0A6 0xFcC598b3E3575CA937AF7F0E804a8BAb5E92a3f6 0xfF542BbB954E836f2fA1F2f53D5444aF36a701Ee)
# g=$( IFS=$','; echo "${n[*]}")
# required=$(loadConf ".multiSigWallet.required")
# MultiSigWallet=$(dappCreate common-contracts contracts/MultiSigWallet.sol:MultiSigWallet [$g] $required)

# contributionPool=$(loadConf ".market.contributionPool")
# register "addr" "CONTRACT_CONTRIBUTION_POOL" "$contributionPool"

# devPool=$(loadConf ".market.devPool")
# register "addr" "CONTRACT_DEV_POOL" "$devPool"

# seth --calldata-decode "openBoxes(uint256[],uint256[],bytes32,uint8,bytes32,bytes32)" 0xd98380ea00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001005f67a4128c3cfe330306d1eb93a895b381a49c7a8898cdfc2871a4a29e892f5f000000000000000000000000000000000000000000000000000000000000001c09457ce10121451a6cc752056c00feb7c0fd682699f7e0a94b30d57867e855c17739171f90e90d99e2bbc5782d8849c8b9977b5f4f022275fc2d55adc3351d210000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000007edd021f6034444fa14910d927110bf4000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000004da0fdfcf057600000

# seth call $DRILLTAKEBACK "supervisor()(address)"
# seth call $DRILLTAKEBACK "networkId()(uint256)"

# seth estimate $DRILLTAKEBACK "openBoxes(uint256[],uint256[],bytes32,uint8,bytes32,bytes32)" [57896044618658097711785492504343953926803622600945583609541416789646859373556] [1432000000000000000000] 0x5f67a4128c3cfe330306d1eb93a895b381a49c7a8898cdfc2871a4a29e892f5f 28 0x09457ce10121451a6cc752056c00feb7c0fd682699f7e0a94b30d57867e855c1 0x7739171f90e90d99e2bbc5782d8849c8b9977b5f4f022275fc2d55adc3351d21

# seth estimate -F 0xfcc598b3e3575ca937af7f0e804a8bab5e92a3f6 $CLOCKAUCTION_PROXY "createAuction(uint256,uint256,uint256,uint256,uint256,address)" 0x2a050001050001010000000000000005000000000000000000000000000007e9 0x00000000000000000000000000000000000000000000003635c9adc5dea00000 0x00000000000000000000000000000000000000000000000ad78ebc5ac6200000 0x0000000000000000000000000000000000000000000000000000000000005460 0x000000000000000000000000000000000000000000000000000000006032c9d0 0x000000000000000000000000c5c1534cb2d1157a7bbbf0fdbdc505361c69ba0d

# seth estimate -F 0x735182c782cb8e7806f8903de7913e6880cbf82e $CLOCKAUCTION_PROXY "bidWithToken(uint256,address,uint256)" 0x2a04000104000101000000000000000400000000000000000000000000000270 0x0000000000000000000000000000000000000000000000000000000000000000 242000000000000000001 

# seth send $CLOCKAUCTION_PROXY "bidWithToken(uint256,address,uint256)" 0x2a04000104000101000000000000000400000000000000000000000000000273 0x0000000000000000000000000000000000000000000000000000000000000000 200000000000000000000 
# seth call -F 0xcc5e48beb33b83b8bd0d9d9a85a8f6a27c51f5c5 $SIRINGCLOCKAUCTION_PROXY "bidWithToken(uint256,uint256,uint256)" 0x2a0400010400010200000000000000040000000000000000000000000000001a 0x2a04000104000102000000000000000400000000000000000000000000000003 0x00000000000000000000000000000000000000000000000c1114a64948241420 

# register "addr" "CONTRACT_RING_ERC20_TOKEN" "$TOKEN_ERC20_RING"

# seth send "$POLKAPETADAPTOR" "setTokenIDAuth(uint256,bool)" 20 true

# seth send "$ERC721BRIDGE_PROXY" "registerAdaptor"

# seth send $TOKENUSE_AUTHORITY "rely(address)" "$TOKENUSE_PROXY"

# seth estimate -F 0x735182c782cb8e7806f8903de7913e6880cbf82e $LANDRESOURCE_PROXY "stopMining(uint256)" 0x2a05000105000102000000000000000500000000000000000000000000000006 

# index=0
# token=$OBJECTOWNERSHIP_PROXY
# landId=0x2a04000104000101000000000000000400000000000000000000000000000272
# seth send $LANDRESOURCE_PROXY "equip(uint256,address,uint256,address,uint256)" $landId $TOKEN_ERC20_GOLD $index $token 0x2a04000104000104000000000000000400020000000000000000000000000183

# seth send $LANDRESOURCE_PROXY "divest(uint256,uint256)" $landId $index

seth send $REVENUEPOOL_PROXY "settleToken(address)" $TOKEN_ERC20_RING
